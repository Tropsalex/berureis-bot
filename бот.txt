from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, ContextTypes,
    MessageHandler, filters, ConversationHandler
)

TOKEN = "7109128434:AAGmcO8tbMpK1lbEI0Y3As4lPmlqkOcVPvk"
ADMIN_USER_ID = 549270283

(
    FROM_CITY, TO_CITY, DATE, TIME,
    VEHICLE_CHOICE, BODY_CHOICE,
    CLIENT_PRICE, MARGIN_PERCENT,
    DETAILS,
    CHOOSE_FLIGHT_TO_DELETE,
    CONFIRM_DELETE,
    ENTER_OFFER,
    REGISTER_COMPANY,
    REGISTER_PHONE
) = range(14)

REISY = []
subscribers = set()
user_info = {}  # user_id: {"company": ..., "phone": ...}
blocked_users = set()


# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    subscribers.add(user_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ username
    user_info[user_id] = {
        "name": user.first_name,
        "username": user.username
    }

    if user_id in blocked_users:
        await update.message.reply_text("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–µ–π—Å—ã.")
        return

    keyboard = []
    for reis in REISY:
        btn_text = f"{reis['from']} ‚Üí {reis['to']} | {reis['date']} | {reis['type']} | {reis['price']}"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"view_{reis['id']}")])
    if user_id == ADMIN_USER_ID:
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–π—Å", callback_data="add_flight")])
        keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–µ–π—Å", callback_data="del_flight")])
    await update.message.reply_text("üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–π—Å—ã:", reply_markup=InlineKeyboardMarkup(keyboard))

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    text = f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}\n\nüßæ ID:\n"
    for i, uid in enumerate(subscribers, start=1):
        info = user_info.get(uid, {})
        name = info.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        username = info.get("username")
        username_text = f"(@{username})" if username else "(–±–µ–∑ username)"
        text += f"{i}. {name} {username_text} ‚Äî {uid}\n"

    await update.message.reply_text(text)

async def block_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        return
    try:
        uid = int(context.args[0])
        blocked_users.add(uid)
        await update.message.reply_text(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /block <id>")

async def unblock_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        return
    try:
        uid = int(context.args[0])
        blocked_users.discard(uid)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /unblock <id>")

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Å–∞ (—à–∞–≥–∏) ---
async def get_from_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['from'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:")
    return TO_CITY

async def get_to_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['to'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-15):")
    return DATE

async def get_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['date'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):")
    return TIME

async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['time'] = update.message.text
    keyboard = [
        [InlineKeyboardButton("–§—É—Ä–∞", callback_data="ts_–§—É—Ä–∞")],
        [InlineKeyboardButton("10—Ç", callback_data="ts_10—Ç")],
        [InlineKeyboardButton("5—Ç", callback_data="ts_5—Ç")],
        [InlineKeyboardButton("3—Ç", callback_data="ts_3—Ç")],
        [InlineKeyboardButton("1.5—Ç", callback_data="ts_1.5—Ç")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¢–°:", reply_markup=InlineKeyboardMarkup(keyboard))
    return VEHICLE_CHOICE

async def get_vehicle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['vehicle'] = query.data.replace("ts_", "")
    keyboard = [
        [InlineKeyboardButton("–¢–µ–Ω—Ç", callback_data="body_–¢–µ–Ω—Ç")],
        [InlineKeyboardButton("–ò–∑–æ", callback_data="body_–ò–∑–æ")],
        [InlineKeyboardButton("–†–µ—Ñ", callback_data="body_–†–µ—Ñ")],
        [InlineKeyboardButton("–ë–æ—Ä—Ç", callback_data="body_–ë–æ—Ä—Ç")],
        [InlineKeyboardButton("–õ—é–±–æ–π –∑–∞–∫—Ä—ã—Ç—ã–π", callback_data="body_–õ—é–±–æ–π –∑–∞–∫—Ä—ã—Ç—ã–π")]
    ]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É–∑–æ–≤–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
    return BODY_CHOICE

async def get_body_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    body = query.data.replace("body_", "")
    context.user_data['type'] = f"{context.user_data['vehicle']} / {body}"
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –∫–ª–∏–µ–Ω—Ç–∞ —Å –ù–î–°:")
    return CLIENT_PRICE

async def get_client_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        client_price = int(update.message.text.strip().replace(" ", "").replace("‚ÇΩ", ""))
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞.")
        return CLIENT_PRICE
    context.user_data['client_price'] = client_price
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∂—É –≤ % (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10):")
    return MARGIN_PERCENT

async def get_margin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        margin = float(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
        return MARGIN_PERCENT
    client_price = context.user_data['client_price']
    price_with_vat = int(client_price - (client_price * margin / 100))
    price_without_vat = int(price_with_vat / 1.2)
    context.user_data['price'] = f"{price_with_vat:,} ‚ÇΩ —Å –ù–î–° / {price_without_vat:,} ‚ÇΩ –±–µ–∑ –ù–î–°".replace(",", " ")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ —Ä–µ–π—Å–∞:")
    return DETAILS

async def get_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['details'] = update.message.text
    new_id = max([r['id'] for r in REISY], default=0) + 1
    flight = {
        "id": new_id,
        "from": context.user_data['from'],
        "to": context.user_data['to'],
        "date": context.user_data['date'],
        "time": context.user_data['time'],
        "type": context.user_data['type'],
        "price": context.user_data['price'],
        "details": context.user_data['details']
    }
    REISY.append(flight)

    for user_id in subscribers:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="üöõ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ä–µ–π—Å! –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å."
            )
        except:
            pass
    await update.message.reply_text(
        f"‚úÖ –†–µ–π—Å –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"üöö –†–µ–π—Å ID: {flight['id']}\n"
        f"–ú–∞—Ä—à—Ä—É—Ç: {flight['from']} ‚Üí {flight['to']}\n"
        f"–î–∞—Ç–∞: {flight['date']} –≤ {flight['time']}\n"
        f"–¢–∏–ø –¢–°: {flight['type']}\n"
        f"–°—Ç–∞–≤–∫–∞: {flight['price']}\n"
        f"–î–µ—Ç–∞–ª–∏: {flight['details']}"
    )
    return ConversationHandler.END
    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞ ---
async def register_company(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["company"] = update.message.text
    await update.message.reply_text("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return REGISTER_PHONE

async def register_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    company = context.user_data.get("company")
    phone = update.message.text.strip()
    user_info[user_id] = {"company": company, "phone": phone}
    await update.message.reply_text("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–±–∏—Ä–∞—Ç—å —Ä–µ–π—Å—ã.")

    flight_id = context.user_data.get("pending_take")
    flight = next((r for r in REISY if r["id"] == flight_id), None)
    if flight:
        REISY.remove(flight)
        info = user_info[user_id]
        await context.bot.send_message(chat_id=user_id, text="‚úÖ –†–µ–π—Å –∑–∞–±—Ä–∞–Ω! –õ–æ–≥–∏—Å—Ç —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.")
        await context.bot.send_message(
            chat_id=ADMIN_USER_ID,
            text=(
                f"üöõ –†–µ–π—Å –∑–∞–±—Ä–∞–Ω:\n"
                f"{flight['from']} ‚Üí {flight['to']} | {flight['date']} –≤ {flight['time']}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{update.effective_user.username or update.effective_user.first_name} (id: {user_id})\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {info['phone']}\n"
                f"üè¢ –¢–ö: {info['company']}"
            )
        )
    return ConversationHandler.END


# --- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ ---
async def enter_offer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    flight_id = context.user_data.get("offer_flight_id")
    if flight_id is None:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –†–µ–π—Å –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return ConversationHandler.END

    offer_text = update.message.text.strip()
    flight = next((r for r in REISY if r["id"] == flight_id), None)
    if not flight:
        await update.message.reply_text("‚ùå –†–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    await context.bot.send_message(
        chat_id=ADMIN_USER_ID,
        text=(
            f"üí∏ –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞:\n"
            f"{flight['from']} ‚Üí {flight['to']} | {flight['date']} –≤ {flight['time']}\n"
            f"–°—Ç–∞–≤–∫–∞: {offer_text}\n"
            f"–û—Ç: @{update.effective_user.username or update.effective_user.first_name} (id: {user_id})"
        )
    )
    await update.message.reply_text("‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏—Å—Ç—É.")
    return ConversationHandler.END


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data == "add_flight":
        if user_id != ADMIN_USER_ID:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return ConversationHandler.END
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        return FROM_CITY

    elif data == "del_flight":
        if user_id != ADMIN_USER_ID:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return ConversationHandler.END
        if not REISY:
            await query.edit_message_text("üì≠ –ù–µ—Ç —Ä–µ–π—Å–æ–≤.")
            return ConversationHandler.END
        keyboard = [
            [InlineKeyboardButton(f"{r['from']} ‚Üí {r['to']} | {r['date']}", callback_data=f"delete_{r['id']}")]
            for r in REISY
        ]
        keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        await query.edit_message_text("üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Å:", reply_markup=InlineKeyboardMarkup(keyboard))
        return CHOOSE_FLIGHT_TO_DELETE

    elif data.startswith("delete_"):
        flight_id = int(data.split("_")[1])
        context.user_data['del_id'] = flight_id
        keyboard = [
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ]
        await query.edit_message_text("‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ", reply_markup=InlineKeyboardMarkup(keyboard))
        return CONFIRM_DELETE

    elif data == "confirm_delete":
        flight_id = context.user_data.get('del_id')
        flight = next((r for r in REISY if r["id"] == flight_id), None)
        if flight:
            REISY.remove(flight)
            await query.edit_message_text("‚úÖ –†–µ–π—Å —É–¥–∞–ª—ë–Ω.")
        else:
            await query.edit_message_text("‚ùå –†–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    elif data == "cancel":
        await query.edit_message_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

    elif data.startswith("view_"):
        flight_id = int(data.split("_")[1])
        flight = next((r for r in REISY if r["id"] == flight_id), None)
        if not flight:
            await query.edit_message_text("‚ùå –†–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END
        msg = (
            f"üöö –†–µ–π—Å ID: {flight['id']}\n"
            f"–ú–∞—Ä—à—Ä—É—Ç: {flight['from']} ‚Üí {flight['to']}\n"
            f"–î–∞—Ç–∞: {flight['date']} –≤ {flight['time']}\n"
            f"–¢–∏–ø –¢–°: {flight['type']}\n"
            f"–°—Ç–∞–≤–∫–∞: {flight['price']}\n"
            f"–î–µ—Ç–∞–ª–∏: {flight['details']}"
        )
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–∞–±—Ä–∞—Ç—å —Ä–µ–π—Å", callback_data=f"take_{flight_id}")],
            [InlineKeyboardButton("üí∏ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data=f"offer_{flight_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel")]
        ]
        await query.edit_message_text(msg, reply_markup=InlineKeyboardMarkup(keyboard))
        return ConversationHandler.END

    elif data.startswith("take_"):
        if user_id in blocked_users:
            await query.edit_message_text("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∏—Ä–∞—Ç—å —Ä–µ–π—Å—ã.")
            return ConversationHandler.END

        flight_id = int(data.split("_")[1])
        if user_id not in user_info:
            context.user_data["pending_take"] = flight_id
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏:")
            return REGISTER_COMPANY

        flight = next((r for r in REISY if r["id"] == flight_id), None)
        if flight:
            REISY.remove(flight)
            info = user_info.get(user_id, {})
            await query.edit_message_text("‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —É—á–∞—Å—Ç–∏–µ! –õ–æ–≥–∏—Å—Ç —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.")
            await context.bot.send_message(
                chat_id=ADMIN_USER_ID,
                text=(
                    f"üöõ –†–µ–π—Å –∑–∞–±—Ä–∞–Ω:\n"
                    f"{flight['from']} ‚Üí {flight['to']} | {flight['date']} –≤ {flight['time']}\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{query.from_user.username or query.from_user.first_name} (id: {user_id})\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {info.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üè¢ –¢–ö: {info.get('company', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}"
                )
            )
        else:
            await query.edit_message_text("‚ùå –†–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    elif data.startswith("offer_"):
        flight_id = int(data.split("_")[1])
        context.user_data["offer_flight_id"] = flight_id
        await query.edit_message_text("üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É:")
        return ENTER_OFFER

    else:
        await query.edit_message_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return ConversationHandler.END


# --- –û—Ç–º–µ–Ω–∞ ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# --- MAIN ---
def main():
    application = Application.builder().token(TOKEN).build()

    conv_add_flight = ConversationHandler(
        entry_points=[CallbackQueryHandler(button, pattern="add_flight")],
        states={
            FROM_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_from_city)],
            TO_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_to_city)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_date)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)],
            VEHICLE_CHOICE: [CallbackQueryHandler(get_vehicle_choice, pattern="ts_.*")],
            BODY_CHOICE: [CallbackQueryHandler(get_body_choice, pattern="body_.*")],
            CLIENT_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_client_price)],
            MARGIN_PERCENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_margin)],
            DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_details)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_user=True,
    )

    conv_register = ConversationHandler(
        entry_points=[CallbackQueryHandler(button, pattern="take_.*")],
        states={
            REGISTER_COMPANY: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_company)],
            REGISTER_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_phone)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_user=True,
    )

    conv_offer = ConversationHandler(
        entry_points=[CallbackQueryHandler(button, pattern="offer_.*")],
        states={
            ENTER_OFFER: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_offer)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_user=True,
    )

    conv_delete = ConversationHandler(
        entry_points=[CallbackQueryHandler(button, pattern="del_flight")],
        states={
            CHOOSE_FLIGHT_TO_DELETE: [CallbackQueryHandler(button, pattern="delete_.*|cancel")],
            CONFIRM_DELETE: [CallbackQueryHandler(button, pattern="confirm_delete|cancel")],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_user=True,
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("block", block_user))
    application.add_handler(CommandHandler("unblock", unblock_user))
    application.add_handler(conv_add_flight)
    application.add_handler(conv_register)
    application.add_handler(conv_offer)
    application.add_handler(conv_delete)
    application.add_handler(CallbackQueryHandler(button))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()


if __name__ == "__main__":
    main()


